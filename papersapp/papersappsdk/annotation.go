// Code generated by go-swagger; DO NOT EDIT.

package papersappsdk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Annotation Annotation Schema
//
// swagger:model Annotation
type Annotation struct {

	// Color of the annotation (1-11)
	ColorID float64 `json:"color_id,omitempty"`

	// Annotation creation timestamp
	Created string `json:"created,omitempty"`

	// Boolean indicating if note is set. Note can be created, but can be empty
	HasNote bool `json:"has_note,omitempty"`

	// Unique annotation id
	ID string `json:"id,omitempty"`

	// Annotation modification timestamp
	Modified string `json:"modified,omitempty"`

	// A textual note
	Note string `json:"note,omitempty"`

	// 0-based article page number the annotation is associated with
	PageStart float64 `json:"page_start,omitempty"`

	// [freehand only] An array of freehand annotation paths (polylines) where each path is represented as an array of pairs (arrays) of coordinates in the form of [x, y]
	Paths [][][]float64 `json:"paths"`

	// [note only] The position of the note relative to the page bottom left corner
	Position []float64 `json:"position"`

	// [highlight, underline, strikethrough only] Array of rectangles defining the highlight in page coordinates. The coordinate origin is the page lower left corner
	Rects [][]float64 `json:"rects"`

	// This is the SHA256 of the file onto which the annotation is applied. This is required for any annotations that are linked to a file
	// Required: true
	Sha256 *string `json:"sha256"`

	// Highlighted text
	Text string `json:"text,omitempty"`

	// Type of the annotation. Effectively underline and strikethrough are represented as an array of rects which are just 'thinner' than highlights and have a different color palette
	// Required: true
	// Enum: [highlight underline strikethrough freehand note]
	Type *string `json:"type"`
}

// Validate validates this annotation
func (m *Annotation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSha256(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Annotation) validateSha256(formats strfmt.Registry) error {

	if err := validate.Required("sha256", "body", m.Sha256); err != nil {
		return err
	}

	return nil
}

var annotationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["highlight","underline","strikethrough","freehand","note"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		annotationTypeTypePropEnum = append(annotationTypeTypePropEnum, v)
	}
}

const (

	// AnnotationTypeHighlight captures enum value "highlight"
	AnnotationTypeHighlight string = "highlight"

	// AnnotationTypeUnderline captures enum value "underline"
	AnnotationTypeUnderline string = "underline"

	// AnnotationTypeStrikethrough captures enum value "strikethrough"
	AnnotationTypeStrikethrough string = "strikethrough"

	// AnnotationTypeFreehand captures enum value "freehand"
	AnnotationTypeFreehand string = "freehand"

	// AnnotationTypeNote captures enum value "note"
	AnnotationTypeNote string = "note"
)

// prop value enum
func (m *Annotation) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, annotationTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Annotation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this annotation based on context it is used
func (m *Annotation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Annotation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Annotation) UnmarshalBinary(b []byte) error {
	var res Annotation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
