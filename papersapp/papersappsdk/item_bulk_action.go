// Code generated by go-swagger; DO NOT EDIT.

package papersappsdk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemBulkAction item bulk action
//
// swagger:model ItemBulkAction
type ItemBulkAction struct {

	// action
	// Enum: [create import update resolve add_file destroy]
	Action string `json:"action,omitempty"`

	// data
	Data *ItemBulkActionData `json:"data,omitempty"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this item bulk action
func (m *ItemBulkAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var itemBulkActionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create","import","update","resolve","add_file","destroy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemBulkActionTypeActionPropEnum = append(itemBulkActionTypeActionPropEnum, v)
	}
}

const (

	// ItemBulkActionActionCreate captures enum value "create"
	ItemBulkActionActionCreate string = "create"

	// ItemBulkActionActionImport captures enum value "import"
	ItemBulkActionActionImport string = "import"

	// ItemBulkActionActionUpdate captures enum value "update"
	ItemBulkActionActionUpdate string = "update"

	// ItemBulkActionActionResolve captures enum value "resolve"
	ItemBulkActionActionResolve string = "resolve"

	// ItemBulkActionActionAddFile captures enum value "add_file"
	ItemBulkActionActionAddFile string = "add_file"

	// ItemBulkActionActionDestroy captures enum value "destroy"
	ItemBulkActionActionDestroy string = "destroy"
)

// prop value enum
func (m *ItemBulkAction) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itemBulkActionTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItemBulkAction) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *ItemBulkAction) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item bulk action based on the context it is used
func (m *ItemBulkAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemBulkAction) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemBulkAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemBulkAction) UnmarshalBinary(b []byte) error {
	var res ItemBulkAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ItemBulkActionData item bulk action data
//
// swagger:model ItemBulkActionData
type ItemBulkActionData struct {

	// article
	Article *ArticleMetadata `json:"article,omitempty"`

	// custom metadata
	CustomMetadata interface{} `json:"custom_metadata,omitempty"`

	// custom type
	CustomType string `json:"custom_type,omitempty"`

	// ext ids
	ExtIds *ExtIds `json:"ext_ids,omitempty"`

	// import data
	ImportData *ImportData `json:"import_data,omitempty"`

	// item type
	ItemType ItemType `json:"item_type,omitempty"`

	// merge
	Merge bool `json:"merge,omitempty"`

	// resolve
	Resolve bool `json:"resolve,omitempty"`

	// user data
	UserData *UserData `json:"user_data,omitempty"`
}

// Validate validates this item bulk action data
func (m *ItemBulkActionData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArticle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemBulkActionData) validateArticle(formats strfmt.Registry) error {
	if swag.IsZero(m.Article) { // not required
		return nil
	}

	if m.Article != nil {
		if err := m.Article.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "article")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "article")
			}
			return err
		}
	}

	return nil
}

func (m *ItemBulkActionData) validateExtIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtIds) { // not required
		return nil
	}

	if m.ExtIds != nil {
		if err := m.ExtIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "ext_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "ext_ids")
			}
			return err
		}
	}

	return nil
}

func (m *ItemBulkActionData) validateImportData(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportData) { // not required
		return nil
	}

	if m.ImportData != nil {
		if err := m.ImportData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "import_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "import_data")
			}
			return err
		}
	}

	return nil
}

func (m *ItemBulkActionData) validateItemType(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemType) { // not required
		return nil
	}

	if err := m.ItemType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data" + "." + "item_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("data" + "." + "item_type")
		}
		return err
	}

	return nil
}

func (m *ItemBulkActionData) validateUserData(formats strfmt.Registry) error {
	if swag.IsZero(m.UserData) { // not required
		return nil
	}

	if m.UserData != nil {
		if err := m.UserData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "user_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "user_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item bulk action data based on the context it is used
func (m *ItemBulkActionData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArticle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemBulkActionData) contextValidateArticle(ctx context.Context, formats strfmt.Registry) error {

	if m.Article != nil {
		if err := m.Article.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "article")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "article")
			}
			return err
		}
	}

	return nil
}

func (m *ItemBulkActionData) contextValidateExtIds(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtIds != nil {
		if err := m.ExtIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "ext_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "ext_ids")
			}
			return err
		}
	}

	return nil
}

func (m *ItemBulkActionData) contextValidateImportData(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportData != nil {
		if err := m.ImportData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "import_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "import_data")
			}
			return err
		}
	}

	return nil
}

func (m *ItemBulkActionData) contextValidateItemType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ItemType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data" + "." + "item_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("data" + "." + "item_type")
		}
		return err
	}

	return nil
}

func (m *ItemBulkActionData) contextValidateUserData(ctx context.Context, formats strfmt.Registry) error {

	if m.UserData != nil {
		if err := m.UserData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "user_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "user_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemBulkActionData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemBulkActionData) UnmarshalBinary(b []byte) error {
	var res ItemBulkActionData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
