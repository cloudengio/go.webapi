// Code generated by go-swagger; DO NOT EDIT.

package papersappsdk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ItemInput item input
//
// swagger:model ItemInput
type ItemInput struct {

	// article
	Article *ArticleMetadata `json:"article,omitempty"`

	// custom metadata
	CustomMetadata interface{} `json:"custom_metadata,omitempty"`

	// custom type
	CustomType string `json:"custom_type,omitempty"`

	// ext ids
	ExtIds *ExtIds `json:"ext_ids,omitempty"`

	// item type
	ItemType ItemType `json:"item_type,omitempty"`

	// user data
	UserData *UserData `json:"user_data,omitempty"`
}

// Validate validates this item input
func (m *ItemInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArticle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemInput) validateArticle(formats strfmt.Registry) error {
	if swag.IsZero(m.Article) { // not required
		return nil
	}

	if m.Article != nil {
		if err := m.Article.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("article")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("article")
			}
			return err
		}
	}

	return nil
}

func (m *ItemInput) validateExtIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtIds) { // not required
		return nil
	}

	if m.ExtIds != nil {
		if err := m.ExtIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ext_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ext_ids")
			}
			return err
		}
	}

	return nil
}

func (m *ItemInput) validateItemType(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemType) { // not required
		return nil
	}

	if err := m.ItemType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("item_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("item_type")
		}
		return err
	}

	return nil
}

func (m *ItemInput) validateUserData(formats strfmt.Registry) error {
	if swag.IsZero(m.UserData) { // not required
		return nil
	}

	if m.UserData != nil {
		if err := m.UserData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item input based on the context it is used
func (m *ItemInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArticle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemInput) contextValidateArticle(ctx context.Context, formats strfmt.Registry) error {

	if m.Article != nil {
		if err := m.Article.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("article")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("article")
			}
			return err
		}
	}

	return nil
}

func (m *ItemInput) contextValidateExtIds(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtIds != nil {
		if err := m.ExtIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ext_ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ext_ids")
			}
			return err
		}
	}

	return nil
}

func (m *ItemInput) contextValidateItemType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ItemType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("item_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("item_type")
		}
		return err
	}

	return nil
}

func (m *ItemInput) contextValidateUserData(ctx context.Context, formats strfmt.Registry) error {

	if m.UserData != nil {
		if err := m.UserData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemInput) UnmarshalBinary(b []byte) error {
	var res ItemInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
